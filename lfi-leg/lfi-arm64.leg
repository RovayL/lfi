%{
#include <stdio.h>
#include <util.h>
#include <assert.h>

#include "arm64.h"
#include "ht.h"
#include "op.h"

extern FILE* input;
extern FILE* output;

typedef struct transform {
    char* val;
    char* guard;
    char* post;
} Transform;

static void
tfree(Transform t)
{
    free(t.val);
    free(t.guard);
    free(t.post);
}

// These functions are for the load/store rewriter.

static void
ldst(Transform l, Transform rt, Transform addr, bool isload)
{
    if (addr.guard)
        mkinsn("%s\n", addr.guard);
    if (isload && isres(rt.val)) {
        mkinsn("%s x22, %s\n", l.val, addr.val);
        mkinsn("add %s, x21, w22, uxtw\n", rt.val);
    } else {
        mkinsn("%s %s, %s\n", l.val, rt.val, addr.val);
    }
    if (addr.post)
        mkinsn("%s\n", addr.post);
    tfree(l); tfree(rt); tfree(addr);
}

static void
ldstmulti(Transform l, Transform rt1, Transform rt2, Transform addr, bool isload)
{
    mkinsn("%s\n", addr.guard);
    if (isload && (isres(rt1.val) || isres(rt2.val) || isfixed(rt1.val) || isfixed(rt2.val))) {
        if (isfixed(rt1.val)) {
            free(rt1.val); rt1.val = strdup("xzr");
        }
        if (isfixed(rt2.val)) {
            free(rt2.val); rt2.val = strdup("xzr");
        }
        if (isres(rt1.val)) {
            mkinsn("%s x22, %s, %s\n", l.val, rt2.val, addr.val);
            mkinsn("add %s, x21, w22, uxtw\n", rt1.val);
        } else if (isres(rt2.val)) {
            mkinsn("%s %s, x22, %s\n", l.val, rt1.val, addr.val);
            mkinsn("add %s, x21, w22, uxtw\n", rt2.val);
        } else {
            mkinsn("%s %s, %s, %s\n", l.val, rt1.val, rt2.val, addr.val);
        }
    } else {
        mkinsn("%s %s, %s, %s\n", l.val, rt1.val, rt2.val, addr.val);
    }
    if (addr.post)
        mkinsn("%s\n", addr.post);
    tfree(l); tfree(rt1); tfree(rt2); tfree(addr);
}

#define YYSTYPE Transform

#define YY_INPUT(buf, result, max_size)      \
{                                            \
    result = fread(buf, 1, max_size, input); \
}                                            \
%}

Top = Insn* !.

Insn = INDENT Label? (
      LdSt
    | Adr
    | ShortBranch
    | Branch
    | BranchTLS
    | Syscall
    | ModSpecial
    | ModLR
    | Directive
    | Comment
    | Any
) Comment? EOL+

Comment = '//' (!EOL .)*

INDENT = < [ \t]* > {
    // if (yyleng > 0)
        // printf("%s", yytext);
}

# --- Address generation ---

Adr = a:ADR rt:XREG COMMA rest:REMAINDER {
    mkinsn("%s x22, %s\n", a.val, rest.val);
    mkinsn("mov w%s, w22\n", num(rt.val));
    tfree(a); tfree(rt); tfree(rest);
}

ADR = < ('adr' | 'adrp') > - { $$ = (Transform) { .val = strndup(yytext, yyleng) } }

# --- loads and stores ---

LdSt = LdOpt | LdNoOpt | LdMulti | StOpt | StNoOpt | StMulti | Atomic1 | Atomic2

LdOpt = l:LD rt:REG COMMA addr:AddrOpt {
    ldst(l, rt, addr, true);
}

LdNoOpt = l:LD_BASIC rt:REG COMMA addr:AddrNoOpt {
    ldst(l, rt, addr, true);
}

LdMulti = l:LD_MULTI rt1:REG COMMA rt2:REG COMMA addr:AddrNoOpt {
    ldstmulti(l, rt1, rt2, addr, true);
}

StOpt = l:ST rt:REG COMMA addr:AddrOpt {
    ldst(l, rt, addr, false);
}

StNoOpt = l:ST_BASIC rt:REG COMMA addr:AddrNoOpt {
    ldst(l, rt, addr, false);
}

StMulti = l:ST_MULTI rt1:REG COMMA rt2:REG COMMA addr:AddrNoOpt {
    ldstmulti(l, rt1, rt2, addr, false);
}

Atomic1 = a:ATOMIC_1 rt:REG COMMA addr:AddrNoOpt {
    ldst(a, rt, addr, false);
}

Atomic2 = a:ATOMIC_2 rt1:REG COMMA rt2:REG COMMA addr:AddrNoOpt {
    ldstmulti(a, rt1, rt2, addr, false);
}

# Address mode transformations that use [x21, wN, uxtw].
AddrOpt = (
    # [xN, i]!
      (LB r:XREG COMMA i:IMM RB EXCLAM) {
        $$ = (Transform) {
            .guard = xasprintf("add %s, %s, %s", r.val, r.val, i.val),
            .val = xasprintf("[x21, w%s, uxtw]", num(r.val)),
        };
        tfree(r); tfree(i);
    }
    # [xN, i]
    | (LB r:XREG COMMA i:IMM RB) {
        char* ival = i.val;
        if (i.val[0] == '#')
            ival++;
        int ii = atoi(ival);
        if (ii > 4096 || (ival[0] == ':' && strncmp(ival, ":lo12:", strlen(":lo12:")) != 0)) {
            $$ = (Transform) {
                .guard = xasprintf("add x18, x21, w%s, uxtw", num(r.val)),
                .val = xasprintf("[x18, %s]", i.val),
            };
        } else {
            $$ = (Transform) {
                .guard = xasprintf("add x22, %s, %s", r.val, i.val),
                .val = strdup("[x21, w22, uxtw]"),
            };
        }
        tfree(r); tfree(i);
    }
    # [xN], i
    | (LB r:XREG RB COMMA i:IMM) {
        $$ = (Transform) {
            .val = xasprintf("[x21, w%s, uxtw]", num(r.val)),
            .post = xasprintf("add %s, %s, %s", r.val, r.val, i.val),
        };
        tfree(r); tfree(i);
    }
    # [xN]
    | (LB r:XREG RB) {
        $$ = (Transform) {
            .val = xasprintf("[x21, w%s, uxtw]", num(r.val)),
        };
        tfree(r);
    }
    # [xN, xM, ...]
    | (LB r1:XREG COMMA r2:REG COMMA m:ADDR_MOD RB) {
        $$ = (Transform) {
            .guard = xasprintf("add x22, %s, %s, %s", r1.val, r2.val, m.val),
            .val = strdup("[x21, w22, uxtw]"),
        };
        tfree(r1); tfree(r2); tfree(m);
    }
    # [xN, xM]
    | (LB r1:XREG COMMA r2:REG RB) {
        $$ = (Transform) {
            .guard = xasprintf("add x22, %s, %s", r1.val, r2.val),
            .val = strdup("[x21, w22, uxtw]"),
        };
        tfree(r1); tfree(r2);
    }
)

# Address mode transformations that use x18.
AddrNoOpt = (
    # [xN, i]!
      (LB r:XREG COMMA i:IMM RB EXCLAM) {
        $$ = (Transform) {
            .guard = xasprintf("add x18, x21, w%s, uxtw", num(r.val)),
            .val = xasprintf("[x18, %s]!", i.val),
            .post = xasprintf("mov %s, x18", r.val),
        };
        tfree(r); tfree(i);
    }
    # [xN, i]
    | (LB r:XREG COMMA i:IMM RB) {
        $$ = (Transform) {
            .guard = xasprintf("add x18, x21, w%s, uxtw", num(r.val)),
            .val = xasprintf("[x18, %s]", i.val),
        };
        tfree(i); tfree(r);
    }
    # [xN], xM
    | (LB r1:XREG RB COMMA r2:XREG) {
        $$ = (Transform) {
            .guard = xasprintf("add x18, x21, w%s, uxtw", num(r1.val)),
            .val = xasprintf("[x18]", i.val),
            .post = xasprintf("add %s, %s, %s", r1.val, r1.val, r2.val),
        };
        tfree(r1); tfree(r2);
    }
    # [xN], i
    | (LB r:XREG RB COMMA i:IMM) {
        $$ = (Transform) {
            .guard = xasprintf("add x18, x21, w%s, uxtw", num(r.val)),
            .val = xasprintf("[x18], %s", i.val),
            .post = xasprintf("mov %s, x18", r.val),
        };
        tfree(r); tfree(i);
    }
    # [xN]
    | (LB r:XREG RB) {
        $$ = (Transform) {
            .guard = xasprintf("add x18, x21, w%s, uxtw", num(r.val)),
            .val = strdup("[x18]"),
        };
        tfree(r);
    }
)

# Loads/stores that have all addressing modes available.
LD = < (
      'ldrs' [bhw]
    | 'ldr' [bh]?
    | 'prfm'
) > - { $$ = (Transform) { .val = strndup(yytext, yyleng) } }

ST = < (
    'str' [bh]?
) > - { $$ = (Transform) { .val = strndup(yytext, yyleng) } }

# Loads/stores that only have basic addressing modes available.
LD_BASIC = < (
      'ldurs' [bhw]
    | 'ldur' [bh]?
    | 'ldxr' [bh]?
    | 'ldar' [bh]?
    | 'ldaxr' [bh]?
    | 'ldtrs' [bhw]?
    | 'ldtr' [bh]?
    | 'prfum'
    | 'ld' [1234] 'r'?
) > - { $$ = (Transform) { .val = strndup(yytext, yyleng) } }

ST_BASIC = < (
      'stur' [bh]?
    | 'stlr' [bh]?
    | 'sttr' [bh]?
    | 'st' [1234]
) > - { $$ = (Transform) { .val = strndup(yytext, yyleng) } }

LD_MULTI = < (
      'ldpsw'
    | 'ldp'
    | 'ld' 'a'? 'xp'
    | 'ldnp'
) > - { $$ = (Transform) { .val = strndup(yytext, yyleng) } }

ST_MULTI = < (
      'stp'
    | 'stnp'
    | 'st' 'l'? 'xr' # note: first arg is a result
) > - { $$ = (Transform) { .val = strndup(yytext, yyleng) } }

# TODO: special case for stores with exclusive monitor
ST_MULTI_3 = < (
      'st' 'l'? 'xp'
) > - { $$ = (Transform) { .val = strndup(yytext, yyleng) } }

ATOMIC_1 = < (
      'st' AO 'a'? 'l'? [bh]?
) > - { $$ = (Transform) { .val = strndup(yytext, yyleng) } }

ATOMIC_2 = < (
      'cas' 'a'? 'l'? [bh]?
    | 'ld' AO 'a'? 'l'? [bh]?
    | 'swp' 'a'? 'l'? [bh]?
) > - { $$ = (Transform) { .val = strndup(yytext, yyleng) } }

AO = 'add' | 'clr' | 'eor' | 'set'

# --- branches ---

ShortBranch = b:TBZ r:REG COMMA imm:IMM COMMA name:NAME {
    mktbz(b.val, r.val, imm.val, name.val);
    tfree(b); tfree(r); tfree(imm); tfree(name);
}

TBZ = < ('tbz' | 'tbnz') > - { $$ = (Transform) { .val = strndup(yytext, yyleng) } }

# TODO: we probably want a similar thing for .tlsdescadd and .tlsdescldr

BranchTLS = tls:TLS_DESCCALL EOL INDENT Label? b:BRANCH r:XREG {
    mkinsn("add x18, x21, w%s, uxtw\n", num(r.val));
    mkdirective(xasprintf("%s\n", tls.val));
    mkinsn("%s x18\n", b.val);
    tfree(r); tfree(b);
}

TLS_DESCCALL = < '.tlsdesccall' (!EOL .)* > {
    $$ = (Transform) { .val = strndup(yytext, yyleng) }
}

Branch = b:BRANCH r:XREG {
    mkinsn("add x18, x21, w%s, uxtw\n", num(r.val));
    mkinsn("%s x18\n", b.val);
    tfree(r); tfree(b);
}

BRANCH = < ('br' | 'blr') > - { $$ = (Transform) { .val = strndup(yytext, yyleng) } }

# --- syscalls ---

Syscall = < 'svc' - (!EOL .)* > - {
    mkinsn("str x30, [sp, #-16]!\n");
    mkinsn("ldr x30, [x25]\n");
    mkinsn("blr x30\n");
    mkinsn("ldr x22, [sp], 16\n");
    mkinsn("add x30, x21, w22, uxtw\n");
}

# --- reserved register modification ---

ModSpecial = i:MODINST res:RESREG COMMA r:REMAINDER {
    mkinsn("%s x22, %s\n", i.val, r.val);
    mkinsn("add %s, x21, w22, uxtw\n", res.val);
    tfree(r); tfree(res); tfree(i);
}

ModLR = ModNormalLR | ModMultiLR1 | ModMultiLR2

ModNormalLR = 'ldr' - 'x30' - COMMA r:REMAINDER {
    mkinsn("ldr x22, %s\n", r.val);
    mkinsn("add x30, x21, w22, uxtw\n");
    tfree(r);
}

ModMultiLR1 = 'ldp' - 'x30' - COMMA reg:REG COMMA r:REMAINDER {
    mkinsn("ldp x22, %s, %s\n", reg.val, r.val);
    mkinsn("add x30, x21, w22, uxtw\n");
    tfree(r); tfree(reg);
}

ModMultiLR2 = 'ldp' - reg:REG COMMA 'x30' - COMMA r:REMAINDER {
    mkinsn("ldp %s, x22, %s\n", reg.val, r.val);
    mkinsn("add x30, x21, w22, uxtw\n");
    tfree(r); tfree(reg);
}


MODINST = < (
      'add'
    | 'sub'
    | 'mov'
    | 'and'
    | 'orr'
    | 'eor'
) > - { $$ = (Transform) { .val = strndup(yytext, yyleng) } }

REMAINDER = < (!EOL .)* > { $$ = (Transform) { .val = strndup(yytext, yyleng) } }

# --- everything else ---

Any = < (!EOL .)* > {
    if (yyleng > 0)
        mkinsn("%s\n", yytext);
}

Label = < ([0-9]+ | ID) > ':' - {
    mklabel(strndup(yytext, yyleng));
}

Directive = < '.' (!EOL .)* > - {
    mkdirective(xasprintf("%s\n", yytext));
}

NAME = < ID > - { $$ = (Transform) { .val = strndup(yytext, yyleng) } }

# --- common definitions ---

IMM = < IMM_RAW > - { $$ = (Transform) { .val = strndup(yytext, yyleng) } }

IMM_RAW = (
    ('#' -)? 
    (
          [-0-9abcdefxABCDEF]+
        | BALANCED
        | RELOC
    )
)

BALANCED = LP ([^()] | BALANCED)* RP

RELOC = ':' ID ':' ID

ADDR_MOD = < (
      ('lsl' - IMM_RAW)
    | ([su] 'xtw' - IMM_RAW?)
    | ('sxtx' - IMM_RAW?)
) > - {
    $$ = (Transform) { .val = strndup(yytext, yyleng) }
}

RESREG = < (
      'x21'
    | 'x18'
    | 'x30'
    | 'sp'
) > - { $$ = (Transform) { .val = strndup(yytext, yyleng) } }

REG = XREG | WREG | SIMD_REG

SIMD_REG = < (
      (LC ([^}])* RC (LB (!RB .)* RB)?)
    | ID
) > - { $$ = (Transform) { .val = strndup(yytext, yyleng) } }

XREG = < 'x' REGNUM > - { $$ = (Transform) { .val = strndup(yytext, yyleng) } }

WREG = < 'w' REGNUM > - { $$ = (Transform) { .val = strndup(yytext, yyleng) } }

REGNUM = (
      '10'
    | '11'
    | '12'
    | '13'
    | '14'
    | '15'
    | '16'
    | '17'
    | '18'
    | '19'
    | '20'
    | '21'
    | '22'
    | '23'
    | '24'
    | '25'
    | '26'
    | '27'
    | '28'
    | '29'
    | '30'
    | '0'
    | '1'
    | '2'
    | '3'
    | '4'
    | '5'
    | '6'
    | '7'
    | '8'
    | '9'
    | 'zr'
)

ID = [a-zA-Z_.][-a-zA-Z0-9_.+]*

COMMA   = ',' -
EXCLAM  = '!' -
LB      = '[' -
RB      = ']' -
LP      = '(' -
RP      = ')' -
LC      = '{' -
RC      = '}' -
-       = [ \t]*
EOL     = '\n' | '\r\n' | '\r'

%%

enum {
    FIXUP_DIST = 8000,
};

static int
dist(int a, int b)
{
    int d = a - b;
    if (d < 0)
        d = -d;
    return d;
}

bool
lfigen()
{
    if (!yyparse())
        return false;

    struct ht labels;
    int icount = 0;
    int r = ht_alloc(&labels, 1024);
    assert(r == 0);

    struct op* op = ops;
    while (op) {
        if (op->label != NULL) {
            ht_put(&labels, op->label, icount);
        }
        icount += op->insn ? 1 : 0;
        op = op->next;
    }

    icount = 0;
    op = ops;
    while (op) {
        if (op->shortbr) {
            bool found;
            int tcount = ht_get(&labels, op->target, &found);
            if (found && op->replace && dist(tcount, icount) > FIXUP_DIST) {
                fprintf(output, "%s", op->replace);
            } else {
                fprintf(output, "%s", op->text);
            }
        } else {
            fprintf(output, "%s", op->text);
        }
        icount += op->insn ? 1 : 0;
        op = op->next;
    }

    return true;
}
