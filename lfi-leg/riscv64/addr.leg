%{
#include "riscv64/riscv64.h"
#include "args.h"
#include "op.h"
#include "util.h"

static void
ldst(Result l, Result rt, Result addr)
{
    if (addr.pre)
        mkinsn("%s", addr.pre);
    mkinsn("%s %s, %s", l.val, rt.val, addr.val);
    if (addr.post)
        mkinsn("%s", addr.post);
    rfree(l); rfree(rt); rfree(addr);
}

static void
ldstmulti(Result l, Result rt1, Result rt2, Result addr)
{
    if (addr.pre)
        mkinsn("%s", addr.pre);
    mkinsn("%s %s, %s, %s", l.val, rt1.val, rt2.val, addr.val);
    if (addr.post)
        mkinsn("%s", addr.post);
    rfree(l); rfree(rt1); rfree(rt2); rfree(addr);
}
%}

# Address mode transformations in the form of (reg) or i(reg)

AddrP = (
    # i(xN)
      (i:IMM LP (!'x18' r:REG) RP) {
        $$ = (Result) {
            .pre = xasprintf("add.uw x18, %s, x21", r.val),
            .val = xasprintf("%s(x18)", i.val),
        };
        rfree(r); rfree(i);
    }
    # (xN)
    | (LP (!'x18' r:REG) RP) {
         $$ = (Result) {
            .pre = xasprintf("add.uw x18, %s, x21", r.val),
            .val = xasprintf("(x18)"),
        };
        rfree(r); rfree(i);
    }
)


ADDR_MOD = < (
      ('lsl' - IMM_RAW)
    | ([su] 'xtw' - IMM_RAW?)
    | ('sxtx' - IMM_RAW?)
) > - {
    $$ = (Result) { .val = strndup(yytext, yyleng) }
}
