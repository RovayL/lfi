%{
#include "arm64/arm64.h"
#include "op.h"
#include "args.h"

#define YY_INPUT(ctx, buf, result, max_size)   \
{                                              \
    char yyc = ctx->op->text[ctx->idx];        \
    ctx->idx += yyc != 0;                      \
    result = yyc == 0 ? 0 : (*(buf) = yyc, 1); \
}                                              \

static void
tbzmeter(bool aligned, bool indirect)
{
    if (aligned)
        mkdirective(".p2align 4");
    mkinsn("sub x23, x23, #0");
    mkinsn("tbz x23, #63, 1000f");
    if (indirect && aligned) {
        mkinsn("nop");
        mkinsn("nop");
    }
    mkinsn("brk #0");
    if (indirect && aligned)
        mkinsn("nop");
    mklabel("1000");
}

static void
fpmeter(bool aligned, bool indirect)
{
    if (aligned)
        mkdirective(".p2align 4");
    mkinsn("sub x23, x23, #0");
    mkinsn("fmov d31, x23");
    if (indirect && aligned) {
        mkinsn("nop");
        mkinsn("nop");
    }
    mkinsn("fneg d31, d31");
    if (indirect && aligned)
        mkinsn("nop");
}

static void
timermeter(bool aligned, bool indirect)
{
    if (aligned)
        mkdirective(".p2align 4");
    mkinsn("sub x23, x23, #0");
    if (indirect && aligned) {
        mkinsn("nop");
    }
}

static void (*meter)(bool, bool);
%}

Top = IndBranch | Branch

IndBranch = b:INDBRANCH SEP r:XREG {
    meter(true, true);
    mkinsn("bic %s, %s, 0xf", r.val, r.val);
    mkinsn("%s %s", b.val, r.val);
    rfree(b); rfree(r);
}

Branch = b:DIRBRANCH SEP rest:REMAINDER {
    meter(true, false);
    mkinsn("%s %s", b.val, rest.val);
}

INDBRANCH = < ('br' | 'blr') > {
    $$ = (Result) { .val = strndup(yytext, yyleng) };
}

DIRBRANCH = < (
	  'b.eq'
	| 'b.ne'
	| 'b.cs'
	| 'b.hs'
	| 'b.cc'
	| 'b.lo'
	| 'b.mi'
	| 'b.pl'
	| 'b.vs'
	| 'b.vc'
	| 'b.hi'
	| 'b.ls'
	| 'b.ge'
	| 'b.lt'
	| 'b.gt'
	| 'b.le'
	| 'b.al'
	| 'bl'
    | 'b'
	| 'cbnz'
	| 'cbz'
	| 'tbnz'
	| 'tbz'
) > {
    $$ = (Result) { .val = strndup(yytext, yyleng) };
}

%%

void
arm64_meterpass(struct op* op)
{
    if (!op->insn)
        return;
    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));
    ctx.op = op;
    oplocate(op);

    switch (args.meter) {
    case METER_BRANCH:
        meter = tbzmeter;
        break;
    case METER_FP:
        meter = fpmeter;
        break;
    case METER_TIMER:
        meter = timermeter;
        break;
    default:
        fprintf(stderr, "meter pass run without a valid meter setting\n");
        return;
    }

    if (yyparse(&ctx)) {
        opremove(op);
        opfree(op);
    }
    yyrelease(&ctx);
}
